// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-macos13.1 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name RiveRuntime
import AppKit
import Combine
import Foundation
@_exported import RiveRuntime
import Swift
import SwiftUI
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension RiveRuntime.RiveFile {
  convenience public init(name fileName: Swift.String, extension ext: Swift.String = ".riv", in bundle: Foundation.Bundle = .main, loadCdn: Swift.Bool = true, customLoader: RiveRuntime.LoadAsset? = nil) throws
  public static func getBytes(fileName: Swift.String, extension ext: Swift.String = ".riv", in bundle: Foundation.Bundle = .main) -> [Swift.UInt8]
}
@objc @_Concurrency.MainActor(unsafe) open class RiveView : RiveRuntime.RiveRendererView {
  @objc @_Concurrency.MainActor(unsafe) weak public var playerDelegate: (any RiveRuntime.RivePlayerDelegate)?
  @_Concurrency.MainActor(unsafe) weak public var stateMachineDelegate: (any RiveRuntime.RiveStateMachineDelegate)?
  @_Concurrency.MainActor(unsafe) public var showFPS: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public static var showFPSCounters: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var bounds: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var frame: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) convenience public init(model: RiveRuntime.RiveModel, autoPlay: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) open func setModel(_ model: RiveRuntime.RiveModel, autoPlay: Swift.Bool = true) throws
  @objc @_Concurrency.MainActor(unsafe) open func advance(delta: Swift.Double)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func drawRive(_ rect: CoreFoundation.CGRect, size: CoreFoundation.CGSize)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func mouseDown(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func mouseMoved(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func mouseDragged(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func mouseUp(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func mouseExited(with event: AppKit.NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateTrackingAreas()
}
@objc public enum RiveTouchEvent : Swift.Int {
  case began
  case moved
  case ended
  case cancelled
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol RiveStateMachineDelegate {
  @objc optional func touchBegan(onArtboard artboard: RiveRuntime.RiveArtboard?, atLocation location: CoreFoundation.CGPoint)
  @objc optional func touchMoved(onArtboard artboard: RiveRuntime.RiveArtboard?, atLocation location: CoreFoundation.CGPoint)
  @objc optional func touchEnded(onArtboard artboard: RiveRuntime.RiveArtboard?, atLocation location: CoreFoundation.CGPoint)
  @objc optional func touchCancelled(onArtboard artboard: RiveRuntime.RiveArtboard?, atLocation location: CoreFoundation.CGPoint)
  @objc optional func stateMachine(_ stateMachine: RiveRuntime.RiveStateMachineInstance, receivedInput input: RiveRuntime.StateMachineInput)
  @objc optional func stateMachine(_ stateMachine: RiveRuntime.RiveStateMachineInstance, didChangeState stateName: Swift.String)
  @objc optional func stateMachine(_ stateMachine: RiveRuntime.RiveStateMachineInstance, didReceiveHitResult hitResult: RiveRuntime.RiveHitResult, from event: RiveRuntime.RiveTouchEvent)
  @objc optional func onRiveEventReceived(onRiveEvent riveEvent: RiveRuntime.RiveEvent)
}
@objc public protocol RivePlayerDelegate {
  @objc func player(playedWithModel riveModel: RiveRuntime.RiveModel?)
  @objc func player(pausedWithModel riveModel: RiveRuntime.RiveModel?)
  @objc func player(loopedWithModel riveModel: RiveRuntime.RiveModel?, type: Swift.Int)
  @objc func player(stoppedWithModel riveModel: RiveRuntime.RiveModel?)
  @objc func player(didAdvanceby seconds: Swift.Double, riveModel: RiveRuntime.RiveModel?)
}
extension RiveRuntime.RiveStateMachineInstance {
  public var inputs: [RiveRuntime.StateMachineInput] {
    get
  }
}
@objc public enum StateMachineInputType : Swift.IntegerLiteralType {
  case trigger, number, boolean
  public init?(rawValue: Swift.IntegerLiteralType)
  public typealias RawValue = Swift.IntegerLiteralType
  public var rawValue: Swift.IntegerLiteralType {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class StateMachineInput : ObjectiveC.NSObject {
  final public let name: Swift.String
  final public let type: RiveRuntime.StateMachineInputType
  @objc deinit
}
@objc open class RiveViewModel : ObjectiveC.NSObject, Combine.ObservableObject, RiveRuntime.RiveFileDelegate, RiveRuntime.RiveStateMachineDelegate, RiveRuntime.RivePlayerDelegate {
  open var riveView: RiveRuntime.RiveView? {
    get
  }
  @objc public init(_ model: RiveRuntime.RiveModel, stateMachineName: Swift.String?, fit: RiveRuntime.RiveFit = .contain, alignment: RiveRuntime.RiveAlignment = .center, autoPlay: Swift.Bool = true, artboardName: Swift.String? = nil)
  @objc public init(_ model: RiveRuntime.RiveModel, animationName: Swift.String? = nil, fit: RiveRuntime.RiveFit = .contain, alignment: RiveRuntime.RiveAlignment = .center, autoPlay: Swift.Bool = true, artboardName: Swift.String? = nil)
  @objc public init(fileName: Swift.String, extension: Swift.String = ".riv", in bundle: Foundation.Bundle = .main, stateMachineName: Swift.String?, fit: RiveRuntime.RiveFit = .contain, alignment: RiveRuntime.RiveAlignment = .center, autoPlay: Swift.Bool = true, artboardName: Swift.String? = nil, loadCdn: Swift.Bool = true, customLoader: RiveRuntime.LoadAsset? = nil)
  public init(fileName: Swift.String, extension: Swift.String = ".riv", in bundle: Foundation.Bundle = .main, animationName: Swift.String? = nil, fit: RiveRuntime.RiveFit = .contain, alignment: RiveRuntime.RiveAlignment = .center, autoPlay: Swift.Bool = true, artboardName: Swift.String? = nil, preferredFramesPerSecond: Swift.Int? = nil, loadCdn: Swift.Bool = true, customLoader: RiveRuntime.LoadAsset? = nil)
  @objc public init(webURL: Swift.String, stateMachineName: Swift.String?, fit: RiveRuntime.RiveFit = .contain, alignment: RiveRuntime.RiveAlignment = .center, autoPlay: Swift.Bool = true, loadCdn: Swift.Bool = true, artboardName: Swift.String? = nil)
  @objc public init(webURL: Swift.String, animationName: Swift.String? = nil, fit: RiveRuntime.RiveFit = .contain, alignment: RiveRuntime.RiveAlignment = .center, autoPlay: Swift.Bool = true, loadCdn: Swift.Bool = true, artboardName: Swift.String? = nil)
  open var riveModel: RiveRuntime.RiveModel? {
    get
  }
  open var isPlaying: Swift.Bool {
    get
  }
  open var autoPlay: Swift.Bool
  open var fit: RiveRuntime.RiveFit {
    get
    set
  }
  open var alignment: RiveRuntime.RiveAlignment {
    get
    set
  }
  open var forwardsListenerEvents: Swift.Bool {
    get
    set
  }
  @objc open func play(animationName: Swift.String? = nil, loop: RiveRuntime.RiveLoop = .autoLoop, direction: RiveRuntime.RiveDirection = .autoDirection)
  @objc open func pause()
  @objc open func stop()
  @objc open func reset()
  @objc open func configureModel(artboardName: Swift.String? = nil, stateMachineName: Swift.String? = nil, animationName: Swift.String? = nil) throws
  @objc open func resetToDefaultModel()
  @objc open func triggerInput(_ inputName: Swift.String)
  @objc(setBooleanInput::) open func setInput(_ inputName: Swift.String, value: Swift.Bool)
  @objc(setFloatInput::) open func setInput(_ inputName: Swift.String, value: Swift.Float)
  @objc(setDoubleInput::) open func setInput(_ inputName: Swift.String, value: Swift.Double)
  open func triggerInput(_ inputName: Swift.String, path: Swift.String)
  open func setInput(_ inputName: Swift.String, value: Swift.Bool, path: Swift.String)
  open func setInput(_ inputName: Swift.String, value: Swift.Float, path: Swift.String)
  open func setInput(_ inputName: Swift.String, value: Swift.Double, path: Swift.String)
  @objc open func getTextRunValue(_ textRunName: Swift.String) -> Swift.String?
  @objc open func setTextRunValue(_ textRunName: Swift.String, textValue: Swift.String) throws
  @objc open func artboardNames() -> [Swift.String]
  @objc open func createRiveView() -> RiveRuntime.RiveView
  open func setRiveView(view: RiveRuntime.RiveView)
  @objc open func update(view: RiveRuntime.RiveView)
  open func deregisterView()
  open func view() -> SwiftUI.AnyView
  @objc open func setView(_ view: RiveRuntime.RiveView)
  @objc open func riveFileDidLoad(_ riveFile: RiveRuntime.RiveFile) throws
  @objc open func player(playedWithModel riveModel: RiveRuntime.RiveModel?)
  @objc open func player(pausedWithModel riveModel: RiveRuntime.RiveModel?)
  @objc open func player(loopedWithModel riveModel: RiveRuntime.RiveModel?, type: Swift.Int)
  @objc open func player(stoppedWithModel riveModel: RiveRuntime.RiveModel?)
  @objc open func player(didAdvanceby seconds: Swift.Double, riveModel: RiveRuntime.RiveModel?)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct RiveViewRepresentable : SwiftUI.NSViewRepresentable {
  public init(viewModel: RiveRuntime.RiveViewModel)
  @_Concurrency.MainActor(unsafe) public func makeNSView(context: RiveRuntime.RiveViewRepresentable.Context) -> RiveRuntime.RiveView
  @_Concurrency.MainActor(unsafe) public func updateNSView(_ view: RiveRuntime.RiveView, context: SwiftUI.NSViewRepresentableContext<RiveRuntime.RiveViewRepresentable>)
  @_Concurrency.MainActor(unsafe) public static func dismantleNSView(_ view: RiveRuntime.RiveView, coordinator: RiveRuntime.RiveViewRepresentable.Coordinator)
  @_Concurrency.MainActor(unsafe) public func makeCoordinator() -> RiveRuntime.RiveViewRepresentable.Coordinator
  @objc @_hasMissingDesignatedInitializers public class Coordinator : ObjectiveC.NSObject {
    public var viewModel: RiveRuntime.RiveViewModel
    @objc deinit
  }
  public typealias Body = Swift.Never
  public typealias NSViewType = RiveRuntime.RiveView
}
@objc open class RiveModel : ObjectiveC.NSObject, Foundation.ObservableObject {
  public var stateMachine: RiveRuntime.RiveStateMachineInstance? {
    get
  }
  public var animation: RiveRuntime.RiveLinearAnimationInstance? {
    get
  }
  public var artboard: RiveRuntime.RiveArtboard! {
    get
  }
  public init(riveFile: RiveRuntime.RiveFile)
  public init(fileName: Swift.String, extension: Swift.String = ".riv", in bundle: Foundation.Bundle = .main, loadCdn: Swift.Bool = true, customLoader: RiveRuntime.LoadAsset? = nil) throws
  public init(webURL: Swift.String, delegate: any RiveRuntime.RiveFileDelegate, loadCdn: Swift.Bool)
  @objc open var volume: Swift.Float {
    @objc get
    @objc set
  }
  open func setArtboard(_ name: Swift.String) throws
  open func setArtboard(_ index: Swift.Int? = nil) throws
  open func setStateMachine(_ name: Swift.String) throws
  open func setStateMachine(_ index: Swift.Int? = nil) throws
  open func setAnimation(_ name: Swift.String) throws
  open func setAnimation(_ index: Swift.Int? = nil) throws
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension RiveRuntime.RiveTouchEvent : Swift.Equatable {}
extension RiveRuntime.RiveTouchEvent : Swift.Hashable {}
extension RiveRuntime.RiveTouchEvent : Swift.RawRepresentable {}
extension RiveRuntime.StateMachineInputType : Swift.Equatable {}
extension RiveRuntime.StateMachineInputType : Swift.Hashable {}
extension RiveRuntime.StateMachineInputType : Swift.RawRepresentable {}
